// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Type of Instruction 
    And(a=true,b=instruction[15],out=cType);

    //Mux 1 : Loading into 'A' Register

        /*
        Mux Output : 
                    1)  C-type : d1 = 1 => load ALU
                    2)  A-type : load instruction 
        */ 

        And(a=cType,b=instruction[5],out=aLoadALU);
        Mux16(a=instruction,b=aluOutput,sel=aLoadALU,out=aRegister);

    // Register 'A' : Loading into 'A'

        /*
        Load Choice : 
                    1) A-type 
                    2) C-type && (d1 = 1)
        */
        
        Not(in=cType,out=aType);
        Or(a=aType,b=aLoadALU,out=loadRegisterA);

        ARegister(in=aRegister,load=loadRegisterA,out=aFinal);

    // Mux 2 : Loading into ALU 

        /*
        Mux Output : (C-Type Instruction) 
                    1) Register 'A' if a = 0
                    2) RAM[A] if a = 1
        */ 

        Mux16(a=aFinal,b=inM,sel=instruction[12],out=aluInput);

    // Register 'D' : Loading into 'D'

        /*
        Load Choice : 
                    1) C-type && (d2 = 1) : Register 'D' involved
        */

        And(a=cType,b=instruction[4],out=loadRegisterD);

        /*
        Loading Register D
        */

        DRegister(in=aluOutput,load=loadRegisterD,out=DFinal);

    // ALU Operation

        /*
            C-Type :
                    c1 = 1 => Only A involved => set x = 0 -> zx 
                    c3 = 1 => Only D involved => set y = 0 -> zy 
                    c4 = 0 => x & y  c4 = 1 => x + y       -> f 
                    toggle c6 => toggle output             -> no
                    toggle c2 => toggle x                  -> nx
                    toggle c5 => toggle y                  -> ny    

        */

        ALU(x=DFinal, y=aluInput, zx=instruction[11], nx=instruction[10], 
                    zy=instruction[9], ny=instruction[8], f=instruction[7],
                            no=instruction[6], out=aluOutput,zr=aluOutputZero,ng=aluOutputNegative);

    //Jump Operations 

        /*
            ALU Ouput = 0 -> Jumps Only Occur When j2 = 1
            ALU Ouput < 0 -> Jumps Only Occur When j1 = 1
            ALU Ouput > 0 -> Jumps Only Occur When j3 = 1
        */

        And(a=instruction[1],b=aluOutputZero,out=condition1);     
        And(a=instruction[2],b=aluOutputNegative,out=condition2); 
    
        Or(a=aluOutputZero,b=aluOutputNegative,out=lessThanEqualZero);
        Not(in=lessThanEqualZero,out=moreThanZero);

        And(a=moreThanZero,b=instruction[0],out=condition3);     

        //Atleast One Condition Satisfies 
        Or(a=condition1,b=condition2,out=tempCondition);
        Or(a=condition3,b=tempCondition,out=jumpCondition);

    //Handling PC 

        /*
            Load Condition :
                            1) C-Type Instruction
                            2) Jump Valid
        */

        And(a=cType,b=jumpCondition,out=loadPC);
        Not(in=loadPC,out=incrementPC);

        //PC Operation
        PC(in=aFinal,inc=incrementPC,load=loadPC,reset=reset,out[0..14]=pc);

    //Writing Outputs 
        /*
            C-Type & d3 = 1 => writeM = 1 
        */

            And(a=cType,b=instruction[3],out=writeM);

        /*
            addressM = aFinal[0..14]
        */

            And16(a=true,b=aFinal,out[0..14]=addressM);
            
        /*
            outM = aluOutput
        */

            And16(a=true,b=aluOutput,out=outM);
}